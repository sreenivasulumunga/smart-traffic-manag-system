#include <iostream>
#include <ctime>
#include <thread>
#include <chrono>

class TrafficManagementSystem {
private:
    bool emergencyVehicleApproaching;
    bool trafficViolatorDetected;

public:
    TrafficManagementSystem() : emergencyVehicleApproaching(false), trafficViolatorDetected(false) {}

    void detectEmergencyVehicle() {
       
        emergencyVehicleApproaching = (rand() % 2 == 0);  
    }

    void detectTrafficViolator() {
        // Simulate traffic violator detection (e.g., using cameras)
        trafficViolatorDetected = (rand() % 2 == 0); 
    }

    void manageTraffic() {
        if (emergencyVehicleApproaching) {
            std::cout << "Emergency vehicle approaching! Clearing the path." << std::endl;
       
        } else if (trafficViolatorDetected) {
            std::cout << "Traffic violator detected! Taking necessary actions." << std::endl;
        
        } else {
            std::cout << "Normal traffic flow." << std::endl;
        }
    }
};

int main() {
    srand(time(0));  

    TrafficManagementSystem trafficSystem;

    for (int i = 0; i < 5; ++i) {
        trafficSystem.detectEmergencyVehicle();
        trafficSystem.detectTrafficViolator();
        trafficSystem.manageTraffic();
        
        std::this_thread::sleep_for(std::chrono::seconds(3));

        std::cout << "---------------------" << std::endl;
    }

    return 0;
}
